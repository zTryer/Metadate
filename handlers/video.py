from aiogram import Router, F
from aiogram.types import Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from utils.file_processing import remove_video_metadata, add_gaussian_noise_to_video
from utils.helpers import generate_random_filename, calculate_md5
from sqlalchemy.orm import Session
from database import SessionLocal, get_or_create_user, increment_usage
import os

router = Router()

MAX_FREE_REQUESTS = 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

@router.message(F.video)
async def handle_video(message: Message):
    db: Session = SessionLocal()  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user = get_or_create_user(db, message.from_user.id)

    # –í—ã—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    remaining_requests = MAX_FREE_REQUESTS - user.usage_count

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    if remaining_requests <= 0 and not user.is_paid:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û–ø–ª–∞—Ç–∏—Ç—å"
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–û–ø–ª–∞—Ç–∏—Ç—å",
                        url="https://www.google.com/"  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
                    )
                ]
            ]
        )

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π
        await message.answer(
            "üò¢ –ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–∏, –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤—Å–µ–≥–æ –∑–∞ 99 —Ä—É–±–ª–µ–π - –¥–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ –º–µ—Å—è—Ü. –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ.",
            reply_markup=keyboard
        )
        return

    video = message.video
    file_path = f"{video.file_id}.mp4"
    output_path_cleaned = generate_random_filename("mp4")
    output_path_noisy = generate_random_filename("mp4")

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ –∏ —Å–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
    file = await message.bot.get_file(video.file_id)
    await message.bot.download_file(file.file_path, file_path)
    await message.answer("üëÄ –ù–∞—á–∞–ª–∞—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ")

    try:
        # –£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        remove_video_metadata(file_path, output_path_cleaned)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à—É–º–∞
        add_gaussian_noise_to_video(output_path_cleaned, output_path_noisy, noise_level=0.01)

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        increment_usage(db, message.from_user.id)
        remaining_requests -= 1  # –£–º–µ–Ω—å—à–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø—Ä–æ—Å—ã

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ö—ç—à-—Å—É–º–º
        original_hash = calculate_md5(file_path)
        noisy_hash = calculate_md5(output_path_noisy)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        file_to_send = FSInputFile(output_path_noisy)
        await message.answer_document(file_to_send, caption="‚úÖ –ì–æ—Ç–æ–≤–æ")
        await message.answer(
            f"üéâ –û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —É–Ω–∏–∫–∞–ª–∏–∑–∞—Ü–∏–π: {remaining_requests}/{MAX_FREE_REQUESTS}\n"
            f"–•—ç—à-—Å—É–º–º—ã —Ñ–∞–π–ª–æ–≤:\n–û—Ä–∏–≥–∏–Ω–∞–ª: {original_hash}\n–° —à—É–º–æ–º: {noisy_hash}"
        )
    finally:
        db.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for path in [file_path, output_path_cleaned, output_path_noisy]:
            if os.path.exists(path):
                os.remove(path)
